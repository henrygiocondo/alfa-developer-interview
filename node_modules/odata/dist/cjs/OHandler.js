"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OHandler = void 0;
var tslib_1 = require("tslib");
var OBatch_1 = require("./OBatch");
var ORequest_1 = require("./ORequest");
var OHandler = /** @class */ (function () {
    function OHandler(config) {
        this.config = config;
        this.requests = [];
    }
    /**
     * Does a fetch request to the given endpoint and request
     * all resources in sequent. Tries to parse the result logical
     * so that no further processing is used. If the result is only one
     * entity a object is returned, otherwise a array of objects.
     *
     * @example
     * ```typescript
     *  const russell = await o('https://services.odata.org/TripPinRESTierService/')
     *  .get('People('russellwhyte')
     *  .query();
     *
     *  console.log(russell); // shows: { FirstName: "Russell", LastName: "Whyte" [...] }
     * ```
     *
     * If the request fails with an error code higher then 400 it throws the
     * Response:
     *
     * @example
     * ```typescript
     *  try {
     *    const unknown = await o('https://services.odata.org/TripPinRESTierService/')
     *      .get('People('unknown')
     *      .query();
     *  } catch(res) { // Response
     *    console.log(res.status); // 404
     *  }
     * ```
     *
     * @param query The URLSearchParams that are added to the question mark on the url.
     *              That are usually the odata queries like $filter, $top, etc...
     * @returns Either an array or a object with the given entities. If multiple
     *          resources are fetched, this method returns a array of array/object. If there
     *          is no content (e.g. for delete) this method returns the Response
     */
    OHandler.prototype.query = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, json, ex_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, 4, 5]);
                        this.config.onStart(this);
                        return [4 /*yield*/, this.getFetch(query)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, Promise.all(response.map(function (res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var data, ex_2;
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (!(res.status >= 400)) return [3 /*break*/, 1];
                                            this.config.onError(this, res);
                                            throw res;
                                        case 1:
                                            if (!(res.ok && res.json)) return [3 /*break*/, 6];
                                            _a.label = 2;
                                        case 2:
                                            _a.trys.push([2, 4, , 5]);
                                            this.config.onFinish(this, res);
                                            return [4 /*yield*/, res.json()];
                                        case 3:
                                            data = _a.sent();
                                            return [2 /*return*/, data[this.config.fragment] || data];
                                        case 4:
                                            ex_2 = _a.sent();
                                            return [2 /*return*/, res];
                                        case 5: return [3 /*break*/, 8];
                                        case 6: return [4 /*yield*/, res.text()];
                                        case 7: return [2 /*return*/, _a.sent()];
                                        case 8: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        json = _a.sent();
                        return [2 /*return*/, json.length > 1 ? json : json[0]];
                    case 3:
                        ex_1 = _a.sent();
                        throw ex_1;
                    case 4:
                        this.requests = [];
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Request all requests in sequent. Does simply return a Response or Response[]
     * without any data parsing applied.
     *
     * @param query The URLSearchParams that are added to the question mark on the url.
     *              That are usually the odata queries like $filter, $top, etc...
     */
    OHandler.prototype.fetch = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fetch_1, ex_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        this.config.onStart(this);
                        return [4 /*yield*/, this.getFetch(query)];
                    case 1:
                        fetch_1 = _a.sent();
                        return [2 /*return*/, fetch_1.length === 1 ? fetch_1[0] : fetch_1];
                    case 2:
                        ex_3 = _a.sent();
                        this.config.onError(this, ex_3);
                        throw ex_3;
                    case 3:
                        this.config.onFinish(this);
                        this.requests = [];
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Does a batch http-batch request. All request in that sequent are send via one
     * physically request and afterwards parsed to separate data chunks.
     *
     * @param query The URLSearchParams that are added to the question mark on the url.
     *              That are usually the odata queries like $filter, $top, etc...
     */
    OHandler.prototype.batch = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var batch, url, data, ex_4;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, 3, 4]);
                        batch = new OBatch_1.OBatch(this.requests, this.config, query);
                        url = this.getUrl(this.config.batch.endpoint);
                        return [4 /*yield*/, batch.fetch(url)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                    case 2:
                        ex_4 = _a.sent();
                        throw ex_4;
                    case 3:
                        this.requests = [];
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the data from the endpoint + resource url.
     *
     * @param resource The resource to request e.g. People/$value.
     */
    OHandler.prototype.get = function (resource) {
        if (resource === void 0) { resource = ""; }
        var url = this.getUrl(resource);
        var request = new ORequest_1.ORequest(url, tslib_1.__assign(tslib_1.__assign({}, this.config), { method: "GET" }));
        this.requests.push(request);
        return this;
    };
    /**
     * Post data to an endpoint + resource.
     *
     * @param resource The resource to post to.
     * @param body The data to post.
     */
    OHandler.prototype.post = function (resource, body) {
        if (resource === void 0) { resource = ""; }
        var url = this.getUrl(resource);
        var request = new ORequest_1.ORequest(url, tslib_1.__assign(tslib_1.__assign({}, this.config), { method: "POST", body: this.getBody(body) }));
        this.requests.push(request);
        return this;
    };
    /**
     * Put data to an endpoint + resource.
     *
     * @param resource The resource to put to.
     * @param body The data to put.
     */
    OHandler.prototype.put = function (resource, body) {
        if (resource === void 0) { resource = ""; }
        var url = this.getUrl(resource);
        var request = new ORequest_1.ORequest(url, tslib_1.__assign(tslib_1.__assign({}, this.config), { method: "PUT", body: this.getBody(body) }));
        this.requests.push(request);
        return this;
    };
    /**
     * Patch data to an endpoint + resource.
     *
     * @param resource The resource to patch to.
     * @param body The data to patch.
     */
    OHandler.prototype.patch = function (resource, body) {
        if (resource === void 0) { resource = ""; }
        var url = this.getUrl(resource);
        var request = new ORequest_1.ORequest(url, tslib_1.__assign(tslib_1.__assign({}, this.config), { body: this.getBody(body), method: "PATCH" }));
        this.requests.push(request);
        return this;
    };
    /**
     * Deletes a resource from the endpoint.
     *
     * @param resource The resource to delete e.g. People/1
     */
    OHandler.prototype.delete = function (resource) {
        if (resource === void 0) { resource = ""; }
        var url = this.getUrl(resource);
        var request = new ORequest_1.ORequest(url, tslib_1.__assign(tslib_1.__assign({}, this.config), { method: "DELETE" }));
        this.requests.push(request);
        return this;
    };
    /**
     * Use that method to add any kind of request (e.g. a head request) to
     * the execution list.
     *
     * @example
     * ```typescript
     *   const req = new ORequest('http://full.url/healt', { method: 'HEAD'});
     *   const res = await o('http://another.url').request(req).fetch();
     *   console.log(res.status); // e.g. 200 from http://full.url/healt
     * ```
     * @param req The request to add.
     */
    OHandler.prototype.request = function (req) {
        this.requests.push(req);
    };
    Object.defineProperty(OHandler.prototype, "pending", {
        /**
         * Determines how many request are outstanding.
         */
        get: function () {
            return this.requests.length;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns a URL based on the rootURL + the given resource
     * @param resource The resource to join.
     */
    OHandler.prototype.getUrl = function (resource) {
        return new URL(resource, this.config.rootUrl);
    };
    OHandler.prototype.getFetch = function (query) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result, _i, _a, req_1, request;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(this.pending > 1)) return [3 /*break*/, 5];
                        result = [];
                        _i = 0, _a = this.requests;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        req_1 = _a[_i];
                        req_1.applyQuery(tslib_1.__assign(tslib_1.__assign({}, this.config.query), query));
                        return [4 /*yield*/, req_1.fetch];
                    case 2:
                        request = _b.sent();
                        result.push(request);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, result];
                    case 5:
                        this.requests[0].applyQuery(tslib_1.__assign(tslib_1.__assign({}, this.config.query), query));
                        return [4 /*yield*/, this.requests[0].fetch];
                    case 6: return [2 /*return*/, [_b.sent()]];
                }
            });
        });
    };
    OHandler.prototype.getBody = function (body) {
        if (typeof body === "object") {
            return JSON.stringify(body);
        }
        return body;
    };
    return OHandler;
}());
exports.OHandler = OHandler;
//# sourceMappingURL=OHandler.js.map